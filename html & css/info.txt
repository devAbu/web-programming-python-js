- HTML is a markup language that defines the structure of a web page. It is interpreted by your web browser (Safari, Google Chrome, Firefox, etc.) in order to display content on your screen.

-- index.html - explanation:
  - In the first line, we are declaring (to the web browser) that we are writing the document in the latest version of HTML: HTML5.
  - After that, the page consists of nested HTML elements (such as html and body), each with an opening and closing tag marked with either <element> for an opening and </element> for a closing.
  - Notice how each of the inner elements is indented just a bit further than the last. While this is not necessarily required by the browser, it will be very helpful to keep this up in your own code.
  - HTML elements can include attributes, which give the browser extra information about the element. For example, when we include lang="en" in our initial tag, we are telling the browser that we are using English as our primary language.
  - Inside the HTML element, we typically want to include both a head and a body tag. The head element will include information about your page that is not necessarily displayed, and the body element will contain what is actually visible to users who visit the site.
  - Within the head, we have included a title for our webpage, which you’ll notice is displayed in the tab at the top of our web browser.
  - Finally, we’ve included the text “Hello, world!” in the body, which is the visible part of our page.

Document Object Model (DOM)
  - The DOM is a convenient way of visualizing the way HTML elements relate to each other using a tree-like structure. Above is an example of the DOM layout for the page we just wrote.

- There are many HTML elements you may want to use to customize your page, including headings, lists, and bolded sections. In this next example, we’ll see a few of of these in action.
- One more thing to note: <!-- --> gives us a comment in HTML, so we’ll use that below to explain some of the elements.

FORMS:

  - Another set of elements that is really important when creating a website is how to collect information from users. You can allow users to enter information using an HTML form, which can contain several different types of input. Later in the course, we’ll learn about how to handle information once a form has been submitted.
  - Just as with other HTML elements, there’s no need to memorize these, and W3 Schools is a great resource for learning about them!

CSS:

  - CSS is used to customize the appearance of a website.
  - While we’re just getting, started, we can add a style attribute to any HTML element in order to apply some CSS to it.
  - We change style by altering the CSS properties of an element, writing something like color: blue or text-align: center
  - In this example below, we make a slight change to our very first file to give it a colorful heading
  - If we style an outer element, all of the inner elements automatically take on that style. We can see this if we move the styling we just applied from the header tag to the body tag:

  - While we can style our web page as we’ve done above, to achieve better design, we should be able to move our styling away from the individual lines.
  - One way of doing this is to add your styling between <style> tags in the head. Inside these tags, we write which types of elements we want to be style, and the styling we wish to apply to them. For example
  - Another way is to include in a <link> element in your head with a link to a styles.css file that contains some styling. This means the HTML file would look like: <link rel="stylesheet" href="styles.css">

  - There are far too many CSS properties to go over here, but just like HTML elements, it’s typically easy to Google something along the lines of “change font to blue CSS” to get the result. Some of the most common ones though are:
    - color: the color of text
    - text-align: where elements are placed on the page
    - background-color: can be set to any color
    - width: in pixels or percent of a page
    - height: in pixels or percent of a page
    - padding: how much space should be left inside an element
    - margin: how much space should be left outside an element
    - font-family: type of font for text on page
    - font-size: in pixels
    - border: size type (solid, dashed, etc) color

  SELECTORS:
    - This is a good introduction into what are known as CSS selectors. There are many ways to determine which HTML elements you are styling, some of which we’ll mention here:
      - element type: this is what we’ve been doing so far: styling all elements of the same type.
      - id: Another option is to give our HTML elements an id like so: <h1 id="first-header">Hello!</h1> and then applying styling using #first-header{...} using the hashtag to show that we’re searching by id. Importantly, no two elements can have the same id, and no element can have more than one id.
      - class: This is similar to id, but a class can be shared by more than one element, and a single element can have more than one class. We add classes to an HTML element like this: <h1 class="page-text muted">Hello!</h1> (note that we just added two classes to the element: page-text and muted). We then style based on class using a period instead of a hashtag: .muted {...}
    - Now, we also have to deal with the problem of potentially conflicting CSS. What happens when a header should be red based on its class but blue based on its id? CSS has a specificity order that goes:
      - In-line styling
      - id
      - class
      - element type
    - In addition to the comma for multiple selectors, there are several other ways to specify which elements you would like to style. This table from lecture provides a few, and we’ll go through a few examples below: (styles.css for examples)
      - a, b --> Multiple element selector 
      - a b --> Descendant selector 
      - a > b --> child selector
      - a + b --> adjacent sibling selector
      - [a=b] --> attribute selector
      - a:b --> pseudo-class selector
      - a::b --> pseudo-element selector

        - Descendant Selector: Here, we use the descendant selector to only apply styling to list items found within an unordered list:

  Responsive Design:
    - Today, many people view websites on devices other than computers, such as smartphones and tablets. It’s important to make sure your website is readable to people on all devices.
    - One way we can achieve this is through knowledge of the viewport. The viewport is the part of the screen that is actually visible to the user at any given time. By default, many webpages assume that the viewport is the same on any device, which is what leads to many sites (especially older ones) being difficult to interact with on mobile devices.
    - One simple way to improve the appearance of a site on a mobile device is to add the following line in the head of our HTML files. This line tells the mobile device to use a viewport that is the same width as that of the device you’re using rather than a much larger one.

    " <meta name="viewport" content="width=device-width, initial-scale=1.0"> " - in head tag

    - Another way we can deal with different devices is through media queries. Media queries are ways of changing the style of a page based on how the page is being viewed.
    - For an example of a media query, let’s try to simply change the color of the screen when it shrinks down to a certain size. We signal a media query by typing @media followed by the type of query in parentheses:

    - Another way to deal with differing screen size is using a new CSS attribute known as a flexbox. This allows us to easily have elements wrap around to the next line if they don’t fit horizontally. We do this by putting all of our elements in a div that we’ll call our container. We then add some styling to that div specifying that we want to use a flexbox display for the elements inside of it. We’ve also added some additional styling to the inner divs to better illustrate the wrapping that’s occuring here.

    - Another popular way of styling a page is using an HTML grid. In this grid, we can specify style attributes such as column widths and gaps between columns and rows, as demonstrated below. Note that when we specify column widths, we say the third one is auto, meaning it should fill the rest of the page.

  Bootstrap:
    - It turns out that there are many libraries that other people have already written that can make the styling of a webpage even simpler. One popular library that we’ll use throughout the course is known as bootstrap.
    - We can include bootstrap in our code by adding a single line to the head of our HTML file:
     " CDN "

    - Next, we can look at some of bootstrap’s features by navigating to the documentation portion of their website. On this page, you’ll find many examples of classes you can add to elements that allow them to be styled with bootstrap.
    - One popular bootstrap feature is their grid system. Bootstrap automatically splits a page into 12 columns, and we can decide how many columns an element takes up by adding the class col-x where x is a number between 1 and 12. For example, in the following page, we have a row of columns of equal width, and then a row where the center column is larger:
  
  Sass (Syntactically Awesome Style Sheets):
    - So far, we’ve found a few ways to eliminate redundancy in CSS such as moving it to separate files or using bootstrap, but there are still quite a few places where we can still make improvements. For example, what if we want several elements to have different styles, but for all of them to be the same color? If we decide later we want to change the color, then we would have to change it within several different elements.
    - Sass is a language that allows us to write CSS more efficiently in several ways, one of which is by allowing us to have variables, as in the following example.
    - When writing in Sass, we create a new file with the extension filename.scss. In this file, we can create a new variable by adding a $ before a name, then a colon, then a value. For example, we would write $color: red to set the variable color to the value red. We then access that variable using $color. Here’s an example of our variables.scss file: (STYLES.SCSS)

    - Now, in order to link this styling to our HTML file, we can’t just link to the .scss file because most web browsers only recognize .css files. To deal with this problem, we have to download a program called Sass onto our computers. Then, in our terminal, we write sass variables.scss:variables.css This command will compile a .scss file named variables.scss into a .css file named variables.css, to which you can add a link in your HTML page.
    - To speed up this process, we can use the command sass --watch variables.scss:variables.css which automatically changes the .css file every time a change is detected in the .scss file.
    - While using Sass, we can also physically nest our styling rather than use the CSS selectors we talked about earlier. For example, if we want to apply some styling only to paragraphs and unordered lists within a div, we can write the following

    - One more feature that Sass gives us is known as inheritance. This allows us to create a basic set of styling that can be shared by several different elements. We do this by adding a % before a name of a class, adding some styling, and then later adding the line @extend %classname to the beginning of some styling. For example, the following code applies the styling within the message class to each of the different classes below, resulting in a webpage that looks like the one below.